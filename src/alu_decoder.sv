// ALU decoder
module alu_decoder (
    input  logic  [2:0]  funct3,
    input  logic         funct7b5,
    input  logic  [1:0]  alu_op,     // internal signal generated by main decoder
    output logic  [3:0]  alu_control // output gives to ALU
);
    logic [3:0] R_type;
    logic [3:0] I_type;
    // srai instruction need to be treated separately!!!
    logic       is_srai = (funct3[2]) & (~funct3[1]) & (funct3[0]) & (funct7b5); // funct3 == 3'b101 and funct7[5] == 1'b1

    assign R_type = { (funct7b5 | funct3[1]), funct3 };
    assign I_type = { (is_srai | 1'b0 | funct3[1]), funct3 };

    always_comb begin
        case(alu_op)
            2'b00  : alu_control = 4'b0000; // add, for load(3), store(35), lui(55), jalr(111)
            2'b01  : alu_control = 4'b1000; // sub, for branch(99)
            2'b10  : alu_control = R_type;
            2'b11  : alu_control = I_type;  // other I-type(19)
            default: alu_control = 4'bxxxx; // Error!!!
        endcase
    end
    
endmodule
