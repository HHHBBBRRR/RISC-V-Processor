// Pipelined Controller
module controller (
    /* external signals */
    input  logic          clk,
    input  logic          reset,
    /* Decode stage instr input */
    input   logic  [6:0]  D_opcode,
    input   logic  [2:0]  D_funct3,
    input                 D_funct7b5,
    /* Execute stage generated by ALU */
    input  logic          E_negative,
    input  logic          E_zero,
    input  logic          E_carry,
    input  logic          E_overflow,
    /* control signals give to data path */
    output  logic  [2:0]  D_imm_control,
    output  logic         E_alu_src_a_sel,
    output  logic         E_alu_src_b_sel,
    output  logic  [3:0]  E_alu_control,
    output  logic  [1:0]  E_pc_src_sel,
    output  logic  [2:0]  M_load_control,
    output  logic         M_mem_wen,
    output  logic  [3:0]  M_mem_wmask,
    output  logic  [1:0]  W_rd_src_sel,
    output  logic         W_gpr_wen
);
    /* Decode stage signals */
    logic  [1:0]  D_alu_op;
    logic         D_is_branch; // conditional branch
    logic         D_is_jalr;   // unconditional jump
    logic         D_is_jal;
    logic  [2:0]  D_branch_decoder_control;
    logic         D_alu_src_a_sel;
    logic         D_alu_src_b_sel;
    logic  [3:0]  D_alu_control;
    logic         D_mem_wen;
    logic  [3:0]  D_mem_wmask;
    logic  [2:0]  D_load_control;
    logic  [1:0]  D_rd_src_sel;
    logic         D_gpr_wen;

    /* Execute stage signals */
    logic  [2:0]  E_branch_decoder_control;
    logic         E_take_branch;
    logic         E_is_branch;
    logic         E_is_jalr;
    logic         E_is_jal;
    logic         E_mem_wen;
    logic  [3:0]  E_mem_wmask;
    logic  [2:0]  E_load_control;
    logic  [1:0]  E_rd_src_sel;
    logic         E_gpr_wen;

    /* Memory stage signals */
    logic  [1:0]  M_rd_src_sel;
    logic         M_gpr_wen;

    /*************
    * Decode Unit
    *************/
    main_decoder main_decoder_inst(
        .opcode        	(D_opcode         ),
        .alu_op        	(D_alu_op         ),
        .is_branch    	(D_is_branch      ),
        .is_jalr      	(D_is_jalr        ),
        .is_jal       	(D_is_jal         ),
        .imm_control   	(D_imm_control    ),
        .alu_src_a_sel 	(D_alu_src_a_sel  ),
        .alu_src_b_sel 	(D_alu_src_b_sel  ),
        .rd_src_sel    	(D_rd_src_sel     ),
        .gpr_wen       	(D_gpr_wen        ),
        .mem_wen       	(D_mem_wen        )
    );

    alu_decoder alu_decoder_inst(
        .funct3      	(D_funct3       ),
        .funct7b5    	(D_funct7b5     ),
        .alu_op      	(D_alu_op       ),
        .alu_control 	(D_alu_control  )
    );

    wmask_decoder wmask_decoder_inst(
        .funct3 	(D_funct3  ),
        .wmask  	(D_mem_wmask   )
    );

    assign D_load_control = D_funct3;
    assign D_branch_decoder_control = D_funct3;

    /* Decode stage pipeline register */   
    flopr #(
        .WIDTH 	(23)
    ) DU_pipe_reg (
        .clk   	(clk),
        .reset 	(reset),
        .d     	({D_is_branch, D_is_jalr, D_is_jal, D_branch_decoder_control, D_alu_src_a_sel, D_alu_src_b_sel, D_alu_control, D_mem_wen, D_mem_wmask, D_load_control, D_rd_src_sel, D_gpr_wen}),
        .q     	({E_is_branch, E_is_jalr, E_is_jal, E_branch_decoder_control, E_alu_src_a_sel, E_alu_src_b_sel, E_alu_control, E_mem_wen, E_mem_wmask, E_load_control, E_rd_src_sel, E_gpr_wen})
    );
    
    /*************
    * Execute Unit
    *************/ 
    branch_decoder branch_decoder_inst(
        .negative    	(E_negative     ),
        .zero        	(E_zero         ),
        .carry       	(E_carry        ),
        .overflow    	(E_overflow     ),
        .funct3      	(E_branch_decoder_control       ),
        .take_branch 	(E_take_branch  )
    );
    
    assign E_pc_src_sel = (E_is_jalr ? 2'b10 : (((E_is_branch & E_take_branch) | E_is_jal) ? 2'b01 : 2'b00));

    /* Execute stage pipeline register */ 
    flopr #(
        .WIDTH 	(11)
    ) EU_pipe_reg (
        .clk   	(clk),
        .reset 	(reset),
        .d     	({E_mem_wen, E_mem_wmask, E_load_control, E_rd_src_sel, E_gpr_wen}),
        .q     	({M_mem_wen, M_mem_wmask, M_load_control, M_rd_src_sel, M_gpr_wen})
    );
    
    /*************
    * Memory Unit
    *************/
    /* Memory stage pipeline register */
    flopr #(
        .WIDTH 	(3)
    ) MU_pipe_reg (
        .clk   	(clk),
        .reset 	(reset),
        .d     	({M_rd_src_sel, M_gpr_wen}),
        .q     	({W_rd_src_sel, W_gpr_wen})
    );

endmodule
