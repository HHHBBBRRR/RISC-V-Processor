// Controller
module controller (
    /* instr input */
    input   logic  [6:0]  opcode,
    input   logic  [2:0]  funct3,
    input                 funct7b5,
    /* generated by ALU */
    input  logic          negative,
    input  logic          zero,
    input  logic          carry,
    input  logic          overflow,
    /* gives to data path */
    output  logic  [1:0]  pc_src_sel,
    output  logic  [2:0]  imm_control,
    output  logic         alu_src_a_sel,
    output  logic         alu_src_b_sel,
    output  logic  [3:0]  alu_control,
    output  logic  [2:0]  load_control,
    output  logic         mem_wen,
    output  logic  [3:0]  mem_wmask,
    output  logic  [1:0]  rd_src_sel,
    output  logic         gpr_wen
);
    /* internal signals */
    logic [1:0] alu_op;
    logic       is_branch; // conditional branch
    logic       is_jalr;   // unconditional jump
    logic       is_jal;
    logic       take_branch;

    main_decoder main_decoder_inst(
        .opcode        	(opcode         ),
        .alu_op        	(alu_op         ),
        .is_branch    	(is_branch      ),
        .is_jalr      	(is_jalr        ),
        .is_jal       	(is_jal         ),
        .imm_control   	(imm_control    ),
        .alu_src_a_sel 	(alu_src_a_sel  ),
        .alu_src_b_sel 	(alu_src_b_sel  ),
        .rd_src_sel    	(rd_src_sel     ),
        .gpr_wen       	(gpr_wen        ),
        .mem_wen       	(mem_wen        )
    );
    
    assign load_control = funct3;

    wmask_decoder wmask_decoder_inst(
        .funct3 	(funct3  ),
        .wmask  	(mem_wmask   )
    );
       
    alu_decoder alu_decoder_inst(
        .funct3      	(funct3       ),
        .funct7b5    	(funct7b5     ),
        .alu_op      	(alu_op       ),
        .alu_control 	(alu_control  )
    );
      
    branch_decoder branch_decoder_inst(
        .negative    	(negative     ),
        .zero        	(zero         ),
        .carry       	(carry        ),
        .overflow    	(overflow     ),
        .funct3      	(funct3       ),
        .take_branch 	(take_branch  )
    );
    
    assign pc_src_sel = (is_jalr ? 2'b10 : (((is_branch & take_branch) | is_jal) ? 2'b01 : 2'b00));
    
endmodule
